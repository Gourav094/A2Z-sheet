vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        vector<int>ans;
        queue<int>q;
        q.push(0);
        int vis[V]={0};
        vis[0]=1;
        while(!q.empty()){
            int node=q.front();
            q.pop();
            ans.push_back(node);
            for(auto i:adj[node]){
                if(!vis[i]){
                    vis[i]=1;
                    q.push(i);
                }
            }
        }
        return ans;
    }

//BFS in given in another way
#include <bits/stdc++.h> 
void addEdge(vector<pair<int,int>>&edges,unordered_map<int,set<int>>&adj){
    for(int i=0;i < edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].insert(v);
        adj[v].insert(u);
    }
}
void solve(vector<int>& ans,unordered_map<int,set<int>>&adj,unordered_map<int,bool>&vis,int Node){
    queue<int>q;
    
    q.push(Node);
    vis[Node]=1;
    while(!q.empty()){
        int n=q.front();
        q.pop();
        ans.push_back(n);
        for(auto i : adj[n]){
            if(!vis[i]){
                vis[i]=1;
                q.push(i);
            }
        }
    }
}
vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    // Write your code here
    unordered_map<int,set<int>>adj;
    addEdge(edges,adj);
    vector<int>ans;
    unordered_map<int,bool>vis;
    for(int i=0;i < vertex;i++){
        if(!vis[i]){
            solve(ans,adj,vis,i);
        }
    }
    return ans;
}
