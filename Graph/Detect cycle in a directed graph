steps:
1. Make sure to carry two visited arrays in the DFS call. 
One is a visited array(vis) and the other is a path-visited(pathVis) array. The visited array keeps a track of visited nodes, and 
the path-visited keeps a track of visited nodes in the current traversal only. 
2.While making a DFS call, at first we will mark the node as visited in both the arrays and 
then will traverse through its adjacent nodes. Now, there may be either of the three cases:

Case 1: If the adjacent node is not visited, we will make a new DFS call recursively with that particular node.

Case 2: If the adjacent node is visited and also on the same path(i.e marked visited in the pathVis array), we will return true,
because it means it has a cycle, thereby the pathVis was true.
Returning true will mean the end of the function call, as once we have got a cycle, there is no need to check for further adjacent nodes. 

Case 3: If the adjacent node is visited but not on the same path(i.e not marked in the pathVis array), 
we will continue to the next adjacent node, as it would have been marked as visited in some other path, and not on the current one.


class Solution {
    
    bool DFS(int node,vector<int> adj[],int vis[],int pathvis[]){
        vis[node]=1;
        pathvis[node]=1;
        
        for(auto it : adj[node]){
            if(!vis[it]){
                if(DFS(it,adj,vis,pathvis) == true){
                    return true;
                }
            }
            else if(pathvis[it]){
                return true;
            }
        }
        pathvis[node]=0;
        return false;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        int vis[V]={0};
        int pathvis[V]={0};
        for(int i=0;i < V;i++){
            if(!vis[i]){
                if(DFS(i,adj,vis,pathvis) == true){
                    return true;
                }
            }
        }
        return false;
    }
};
