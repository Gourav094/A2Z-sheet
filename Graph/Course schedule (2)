intution is same as the prerequisite problem in this folder.
we need to return the order of nodes ==> 
u,v ==> v->v

if there no order follow return empty 
code :
every thing is same as topological sort just return toopo array
vector<int> findOrder(int V, int m, vector<vector<int>> pre) 
    {
        //code here
        vector<int>adj[V];
	    
	    for(auto it : pre){
	        adj[it[1]].push_back(it[0]);
	    }
	    
	    vector<int>indegree(V,0);
	    for(int i=0;i < V;i++){
            for(auto node:adj[i]){
                indegree[node]++;
            }
	    }
	    
	    queue<int>q;
	    for(int i=0;i < V;i++){
	        if(indegree[i] == 0){
	            q.push(i);
	        }
	    }
	    vector<int>ans;
	    while(!q.empty()){
	        int node=q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto it : adj[node] ){
	            indegree[it]--;
	            if(indegree[it] == 0){
	                q.push(it);
	            }
	        }
	    }
	    if(ans.size() == V){
	        return ans;
	    }
	    return {};
    }
