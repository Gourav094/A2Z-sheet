Here we use the same idea as the topological sort.
we need to return if all nodes follow the condition
condition: u,v  ==> u comes before v 

by analysing we can conclude we did same thing in topological sort so if topo find every then will return true else return false

class Solution {
public:
	bool isPossible(int V,int P, vector<pair<int, int> >& pre) {
	    // Code here
	    vector<int>adj[V];
	    
	    for(auto it : pre){
	        adj[it.first].push_back(it.second);
	    }
	    
	    vector<int>indegree(V,0);
	    for(int i=0;i < V;i++){
            for(auto node:adj[i]){
                indegree[node]++;
            }
	    }
	    
	    queue<int>q;
	    for(int i=0;i < V;i++){
	        if(indegree[i] == 0){
	            q.push(i);
	        }
	    }
	    vector<int>ans;
	    while(!q.empty()){
	        int node=q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto it : adj[node] ){
	            indegree[it]--;
	            if(indegree[it] == 0){
	                q.push(it);
	            }
	        }
	    }
	    if(ans.size() == V){
	        return true;
	    }
	    return false;
	}
};
