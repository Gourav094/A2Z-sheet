void DFS(int node,vector<int> adj[],vector<int>& ans,int vis[]){
    // Function to return a list containing the DFS traversal of the graph.
        vis[node]=1;
        ans.push_back(node);
        for(auto it:adj[node]){
            if(!vis[it]){
                
                DFS(it,adj,ans,vis);
            }
        }
    }
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        // Code here
        int vis[V]={0};
        vector<int>ans;
        DFS(0,adj,ans,vis);
        return ans;
    }
//BFS if adjacency list not given 

void dfs(int node, unordered_map<int,bool> &visited,  unordered_map<int,list<int>> &adj,  vector<int> &component){
    component.push_back(node);
    visited[node]=true;
    // har connected node k liye recursive call
    for(auto i: adj[node]){
        if(!visited[i]){
          dfs(i,visited,adj,component);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // prepare adjlist
    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++){
        int u = edges[i][0];
        int v= edges[i][1];
        
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    vector<vector<int>> ans;
     unordered_map<int,bool> visited;
    //call all node DFS if not visited
    for(int i=0; i<V;i++){
        if(!visited[i]){
            vector<int> component;
            dfs(i,visited,adj,component);
            ans.push_back(component);
        }
    }
    return ans;
}


