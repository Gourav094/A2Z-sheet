1. Make a adjacenct list 
2. then find topological order
3. then compare the new distance with old distance

class Solution {
  public:
    void topoSort(int node,vector<pair<int,int>>adj[],vector<int>& vis,stack<int>& s){
        vis[node]=1;
        for(auto it:adj[node]){
            int v=it.first;
            if(!vis[v]){
                topoSort(v,adj,vis,s);
            }
        }
        s.push(node);
    }
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        // code here
        vector<pair<int,int>>adj[N];
        for(int i=0;i < M;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            int wt=edges[i][2];
            
            adj[u].push_back({v,wt});
        }
        
        stack<int>s;
        vector<int>vis(N,0);
        for(int i=0;i < N;i++){
            if(!vis[i]){
                topoSort(i,adj,vis,s);
            }
        }
        
        vector<int>dist(N,1e9);
        dist[0]=0;
        
        while(!s.empty()){
            int node=s.top();
            s.pop();
            for(auto it : adj[node]){
                int v=it.first;
                int wt=it.second;
                if( dist[node] + wt < dist[v]){
                    dist[v]=dist[node] + wt;
                }
            }
        }
        for(int i=0;i<N;i++) if(dist[i]==1e9) dist[i]=-1;
        return dist;
    }
};
