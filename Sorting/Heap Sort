steps:
1. swap first and last element -- so that max element is at last
2. decrase the size so that we work on 0 to size-1
3. Now heapify rest part so that arrange in order and max will come on top

class Solution
{
    public:
    //Heapify function to maintain heap property.
    void heapify(int arr[], int n, int i)  
    {
      // Your Code Here
      
        
        int parent=i;
        int large=parent;
        int left=2*parent+1;
        int right=2*parent+2;
        
        
        if(left < n && arr[large] < arr[left]){
            large=left;
        }
        if(right < n && arr[large] < arr[right]){
            large=right;
            
        }
        if(large != parent){
            swap(arr[i],arr[large]);
            heapify(arr,n,large);
        }
            
        
    }

    public:
    //Function to build a Heap from array.
    void buildHeap(int arr[], int n)  
    { 
    // Your Code Here
        for(int i=n/2;i >= 0;i--){
            heapify(arr,n,i);
        }
    }
    
    

    
    public:
    //Function to sort an array using Heap Sort.
    void heapSort(int arr[], int n)
    {
        //code here
        buildHeap(arr,n);
         for(int i=n-1; i>=1; --i) {
            swap(arr[0], arr[i]);
            heapify(arr, i, 0);
        }
    }
};
