Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.

We have n dice and k face means we have 1 to k choices to mkae target for n dice 
apply recusion and try to fit every outcome
// recursive
int solve(int dice ,int face,int target,vector<vector<int>>&dp){
        if(dice == 0){
            return (target == 0);
        }
        if(target < 0){
            return 0;
        }
        if(dp[dice][target] != -1){
            return dp[dice][target];
        }
        int ans=0;
        for(int i=1;i <= face;i++){
            ans=ans + solve(dice-1,face,target-i,dp);
        }
        dp[dice][target]= ans;
        return dp[dice][target];
    }
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
        return solve(n,k,target,dp);
    }
    // memoization
    
    int solve(int dice ,int face,int target,vector<vector<long long >>&dp){
        if(dice == 0){
            return (target == 0)? 1:0;
        }
        if(target == 0 && dice != 0){
            return 0;
        }
        if(target < 0){
            return 0;
        }
        if(dp[dice][target] != -1){
            return dp[dice][target];
        }
        long long  ans=0;
        for(int i=1;i <= face;i++){
            ans=(ans + solve(dice-1,face,target-i,dp) % mod) % mod;
        }
        dp[dice][target]= ans;
        return dp[dice][target] % mod;
    }
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<long long>>dp(n+1,vector<long long >(target+1,-1));
        return solve(n,k,target,dp) % mod;
    }
    
//Tabulation

#define mod 1000000007
class Solution {
public:
  int solve(int n ,int k,int t){
      vector<vector<long long>>dp(n+1,vector<long long>(t+1,0));
      dp[0][0]=1;
  // apply two loops for dice and targte same as recusion 
  //condition will be same as top down just reverse them    
      for(int dice=1;dice <= n;dice++){
          for(int target =1 ;target <= t; target++){
              long long  ans=0;
              for(int i=1;i <= k;i++){
      //firsly chck the index is valid or not
                  if(target-i >= 0){
                      ans=(ans+dp[dice-1][target-i] % mod) % mod;
                  }
              }
              dp[dice][target]= ans%mod;
          }
      }

      return dp[n][t] % mod;
  }
  int numRollsToTarget(int n, int k, int target) {

      return solve(n,k,target);
  }
};
//space optimisation
int solve(int n ,int k,int t){
        
        vector<long long >cur(t+1,0);
        vector<long long >prev(t+1,0);
        prev[0]=1;
         
        for(int dice=1;dice <= n;dice++){
            for(int target =1 ;target <= t; target++){
                long long  ans=0;
                for(int i=1;i <= k;i++){
                    if(target-i >= 0){

                        ans=(ans+prev[target-i] % mod) % mod;
                    }
                }
                cur[target]= ans%mod;
            }
            prev=cur;
        }
        
        return prev[t] % mod;
    }
