Input: arr = [6,2,4]
Output: 32
Explanation: There are two possible trees shown.
The first has a non-leaf node sum 36, and the second has non-leaf node sum 32.

Note: pattern--DP on merge interval
Same as guess number high or lower 2 question
We can partition any one index so take every inedx as partition
for one partition root node is the max of left and right
So take a hashmap to store the maximum of each index

then the ans for one node is maximum of left and right + call left + call right 
find all ans and return minimum out of them
//Recursion
int solve(map<pair<int,int>,int>& maxi,int i,int j){
        if(i == j){
            return 0;
        }
        int ans=INT_MAX;
        for(int k=i;k < j;k++){
            
            ans=min(ans,maxi[{i,k}]*maxi[{k+1,j}] + solve(maxi,i,k) + solve(maxi,k+1,j));
        }
        return ans;
    }
    int mctFromLeafValues(vector<int>& arr) {
        int n=arr.size();
        map<pair<int,int>,int>maxi;
        for(int i=0;i < n;i++){
            maxi[{i,i}]=arr[i];
            for(int j=i+1; j < n;j++){
                maxi[{i,j}]=max(arr[j],maxi[{i,j-1}]);
            }
        }
        return solve(maxi,0,n-1);
    }

//Memoization
class Solution {
public:
    int solve(map<pair<int,int>,int>& maxi,int i,int j,vector<vector<int>>&dp){
        if(i == j){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int ans=INT_MAX;
        for(int k=i;k < j;k++){
            
            ans=min(ans,maxi[{i,k}]*maxi[{k+1,j}] + solve(maxi,i,k,dp) + solve(maxi,k+1,j,dp));
        }
        dp[i][j]= ans;
        return dp[i][j];
    }
    int mctFromLeafValues(vector<int>& arr) {
        int n=arr.size();
        map<pair<int,int>,int>maxi;
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        for(int i=0;i < n;i++){
            maxi[{i,i}]=arr[i];
            for(int j=i+1; j < n;j++){
                maxi[{i,j}]=max(arr[j],maxi[{i,j-1}]);
            }
        }
        return solve(maxi,0,n-1,dp);
    }
};
//Tabulation
class Solution {
public:
    int solve(map<pair<int,int>,int>& maxi,int n){
        vector<vector<int>>dp(n+3,vector<int>(n+3,0));
        
   
        for(int i=n-1;i >= 0;i--){
            for(int j=i; j <= n;j++){
                if(i == j){
                    continue;
                }
                else{
                    int ans=INT_MAX;
                    for(int k=i;k < j;k++){    
                        ans=min(ans,maxi[{i,k}]*maxi[{k+1,j}] + dp[i][k] + dp[k+1][j]);
                    }
                    dp[i][j]= ans;
                }
                
            }
        }
              
        return dp[0][n-1];
    }
    int mctFromLeafValues(vector<int>& arr) {
        int n=arr.size();
        map<pair<int,int>,int>maxi;
        
        for(int i=0;i < n;i++){
            maxi[{i,i}]=arr[i];
            for(int j=i+1; j < n;j++){
                maxi[{i,j}]=max(arr[j],maxi[{i,j-1}]);
            }
        }
        return solve(maxi,n);
    }
};
