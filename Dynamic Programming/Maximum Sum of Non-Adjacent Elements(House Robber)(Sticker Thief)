Since we have two choices for evry case that we can sleect or deselect the house.
take first element with inckusive and exclusive and find maximum for max cost
now call recursion for rest of the case

// Recursion
class Solution
{
    public:
    //Function to find the maximum money the thief can get.
    int solve(int arr[],int n){
        if(n < 0){
            return 0;
        }
        if(n == 0){
            return arr[0];
        }
        int inc=solve(arr,n-2)+ arr[n];
        int exc=solve(arr,n-1)+ 0 ;
        return max(inc,exc);
    }
    int FindMaxSum(int arr[], int n)
    {
        // Your code here
        return solve(arr,n-1);
        
    }
};

//Memoization
class Solution
{
    public
    //Function to find the maximum money the thief can get.
    int solve(int arr[],int n,vector<int>&dp){
        if(n < 0){
            return 0;
        }
        if(n == 0){
            return arr[0];
        }
        if(dp[n] != -1){
            return dp[n];
        }
        int inc=solve(arr,n-2,dp)+ arr[n];
        int exc=solve(arr,n-1,dp)+ 0 ;
        dp[n]= max(inc,exc);
        return dp[n];
    }
    int FindMaxSum(int arr[], int n)
    {
        // Your code here
        vector<int>dp(n+1,-1);
        return solve(arr,n-1,dp);
        
    }
};
// Tabulation
class Solution {
public:
    int solve(vector<int>& arr){
        int n=arr.size();
        vector<int>dp(n,0);
        dp[0]=arr[0];
        dp[1]=max(arr[0],arr[1]);
        
        for(int i=2;i < n;i++){
            int inc=arr[i] + dp[i-2]; 
            int exc=0 + dp[i-1];
            dp[i]=max(inc,exc);
        }

        return dp[n-1];
    }
    int rob(vector<int>& nums) {
        if(nums.size() == 1){
            return nums[0];
        }
        return solve(nums);
    }
};
//space optimisation
class Solution {
public:
    int solve(vector<int>& arr,int n){
        
        int prev1=arr[0];
        int prev2=0;
        for(int i=1;i < n;i++){
            int inc= arr[i] + prev2; 
            int exc= 0 + prev1;
            int cur=max(inc,exc);
            prev2=prev1;
            prev1=cur;
        }

        return prev1;
    }
    int rob(vector<int>& nums) {
        int  n=nums.size();
        if(n == 1){
            return nums[0];
        }
        return solve(nums,n);
    }
};
