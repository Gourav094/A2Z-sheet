Input: coins = [1,2,3], amount = 7
Output: 4

Approach :
For Recursion we will take every possibilites to get sum 7 .
Like for 1 we have three possibilites 1,2,3, then choose 1 again
then after we have 3 more choices
same for rest cases 2,3. So every case consits of three cases.
run a for loop from i=0 to n for every number but substract coins[i] from Sum
Note: Handle 1 case rest recursion will handle
//Recursion
int solve(vector<int>& coins,int sum){
        if(sum == 0){
            return 0;
        }
        if(sum < 0){
            return INT_MAX;
        }
        int mini=INT_MAX;
        for(int i=0;i < coins.size();i++){
            int ans=solve(coins,sum-coins[i]);
            if(ans != INT_MAX){
                mini=min(mini,1+ans);
            }
        }
        return mini;
    }
    
    //Memoization(Top-down)
    class Solution {
public:
    int solve(vector<int>& coins,int sum,vector<int>& dp){
        if(sum == 0){
            return 0;
        }
        if(sum < 0){
            return INT_MAX;
        }
        if(dp[sum] != -1){
            return dp[sum];
        }
        int mini=INT_MAX;
        for(int i=0;i < coins.size();i++){
            int ans=solve(coins,sum-coins[i],dp);
            if(ans != INT_MAX){
                mini=min(mini,1+ans);
            }
        }
        dp[sum]=mini;
        return dp[sum];
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<int>dp(amount+1,-1);
        int ans=solve(coins,amount,dp);
        if(ans == INT_MAX){
            return -1;
        }
        else return ans;
    }
};

//Tabulation
class Solution {
public:
    int solve(vector<int>& coins, int amount){
        vector<long long int>dp(amount+1,INT_MAX);
        dp[0] = 0;

        for(int i = 1; i <= amount; i++){
            for(int j = 0; j < coins.size(); j++){
                if(i-coins[j] >= 0 && dp[i-coins[j]] >= 0){
                    dp[i] = min(dp[i],1+dp[i-coins[j]]);
                }
            }
        }
        if(dp[amount] == INT_MAX){
            return -1;
        }

        return dp[amount];
    }
    int coinChange(vector<int>& coins, int amount) {
        int ans=solve(coins,amount);
        if(ans == INT_MAX){
            return -1;
        }
        return ans;
    }
};
