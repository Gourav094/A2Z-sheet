Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

steps:
1. if character matches ya p[i]==? return true bcoz ? can be placed by any one character so we will incriment both i and j
2. if p[i] is * then we can replace by any character means move only i ==> i-1,j OR we can replace with empty string means dont need * -->i,j-1
3. if any charcter not mathes then return false

//Recursion
bool solve(string& s,string& p,int i,int j){
    //if both string length is less than zero means they matches 
        if(i < 0 && j < 0){
            return true;
        }
     //if p string is less than s
        if(i >= 0 && j < 0){
            return false;
        }
    //if p string contain char but s not then we can return true only if we have * becoz it can be replace by anyone
        if(i < 0 && j >= 0){
            for(int k=0;k <= j;k++){
                if(p[k] != '*'){
                    return false;
                }
            }
            return true;
        }
        if(s[i] == p[j] || p[j] == '?'){
            return  solve(s,p,i-1,j-1);
        }
        else if(p[j] == '*'){
            return solve(s,p,i-1,j) || solve(s,p,i,j-1);
        }
        else return false;
    }
    bool isMatch(string s, string p) {
        int n=s.length();
        int m=p.length();
        return solve(s,p,n-1,m-1);
    }

// Memoization
bool solve(string& s,string& p,int i,int j,vector<vector<int>>& dp){
        if(i < 0 && j < 0){
            return true;
        }
        if(i >= 0 && j < 0){
            return false;
        }
        if(i < 0 && j >= 0){
            for(int k=0;k <= j;k++){
                if(p[k] != '*'){
                    return false;
                }
            }
            return true;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(s[i] == p[j] || p[j] == '?'){
            return dp[i][j]= solve(s,p,i-1,j-1,dp);
        }
        else if(p[j] == '*'){
            return dp[i][j] =solve(s,p,i-1,j,dp) || solve(s,p,i,j-1,dp);
        }
        else return false;
    }
    bool isMatch(string s, string p) {
        int n=s.length();
        int m=p.length();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return solve(s,p,n-1,m-1,dp);
    }
    
    //Tabulation
    bool solve(string& s,string& p){
        int n=s.length();
        int m=p.length();
        vector<vector<int>>dp(n+1,vector<int>(m+1,0));
        dp[0][0]=true;
        for(int j=1;j <= m;j++){
            bool flag=true;
            for(int k=1;k <= j;k++){
                if(p[k-1] != '*'){
                    flag= false;
                    break;
                }
            }
            dp[0][j]= flag;
        }
        for(int i=1;i <= n;i++){
            for(int j=1;j <= m;j++){
                if(s[i-1] == p[j-1] || p[j-1] == '?'){
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p[j-1] == '*'){
                    dp[i][j] =(dp[i-1][j] || dp[i][j-1]);
                }
                else dp[i][j]= false;
            }
        }
        return dp[n][m];
    }
    bool isMatch(string s, string p) {
        return solve(s,p);
    }
    
    //SPace optimisation
    bool solve(string& s,string& p){
        int n=s.length();
        int m=p.length();
        vector<int>cur(m+1,0);
        vector<int>prev(m+1,0);
        prev[0]=true;
        for(int j=1;j <= m;j++){
            bool flag=true;
            for(int k=1;k <= j;k++){
                if(p[k-1] != '*'){
                    flag= false;
                    break;
                }
            }
            prev[j]= flag;
        }
        for(int i=1;i <= n;i++){
            for(int j=1;j <= m;j++){
                if(s[i-1] == p[j-1] || p[j-1] == '?'){
                    cur[j] = prev[j-1];
                }
                else if(p[j-1] == '*'){
                    cur[j] =(prev[j] || cur[j-1]);
                }
                else cur[j]= false;
            }
            prev=cur;
        }
        return prev[m];
    }
