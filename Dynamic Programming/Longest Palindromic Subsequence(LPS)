// ALL approaches are same as LCS just change only LCS function
class Solution {
public:
    int LCS(string a,string b,int n,int m){
        vector<vector<int>>dp(n+2,vector<int>(m+2,0));
        
        for(int i=n-1;i >= 0;i--){
            for(int j=m-1;j >= 0;j--){
                if(a[i] == b[j]){
                   dp[i][j]= 1+dp[i+1][j+1];
                }
                else{
                    dp[i][j]= max(dp[i+1][j],dp[i][j+1]);
                }
            }
        }
        return dp[0][0];
    }
    int longestPalindromeSubseq(string s) {
        string b=s;
        reverse(b.begin(),b.end());
        return LCS(s,b,s.length(),b.length());
    }
};
