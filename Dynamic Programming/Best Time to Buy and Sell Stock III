Input: prices = [3,3,5,0,0,3,1,4]
Output: 6

Same as Buy and Sell stock 2 Just we have limit is we can take only 2 transactions means 2 buy and 2 sell
in the previous solution just add limit
//recursion
int solve(int ind,bool buy,vector<int>& prices,int limit){
        if(ind == prices.size()){
            return 0;
        }
        if(limit == 0){
            return 0;
        }
        int profit=0;
        if(buy){
            int take=(-prices[ind]+solve(ind+1,0,prices,limit));
            int ignore=0+solve(ind+1,1,prices,limit);
            profit=max(take , ignore);
        }
        else{
            int sell=prices[ind]+solve(ind+1,1,prices,limit-1);
            int ignore=0+solve(ind+1,0,prices,limit);
            profit=max(sell,ignore);            
        }
        return profit;
    }
    int maxProfit(vector<int>& prices) {
        return solve(0,1,prices,2);
    }
    
    //Memoization
    int solve(int ind,bool buy,vector<int>& prices,int limit,vector<vector<vector<int>>>&dp){
        if(ind == prices.size()){
            return 0;
        }
        if(limit == 0){
            return 0;
        }
        if(dp[ind][buy][limit] != -1){
            return dp[ind][buy][limit];
        }
        int profit=0;
        if(buy){
            int take=(-prices[ind]+solve(ind+1,0,prices,limit,dp));
            int ignore=0+solve(ind+1,1,prices,limit,dp);
            profit=max(take , ignore);
        }
        else{
            int sell=prices[ind]+solve(ind+1,1,prices,limit-1,dp);
            int ignore=0+solve(ind+1,0,prices,limit,dp);
            profit=max(sell,ignore);            
        }
        dp[ind][buy][limit]= profit;
        return dp[ind][buy][limit];
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,-1)));
        return solve(0,1,prices,2,dp);
    }
    
    //Tabulation
    int solve(vector<int>& prices){
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
        
        for(int ind=n-1; ind >= 0;ind--){
            for(int buy=0;buy <= 1;buy++){
                for(int limit = 1;limit <= 2;limit++){

                    int profit=0;
                    if(buy){
                        int take=(-prices[ind]+dp[ind+1][0][limit]);
                        int ignore=0+dp[ind+1][1][limit];
                        profit=max(take , ignore);
                    }
                    else{
                        int sell=prices[ind]+dp[ind+1][1][limit-1];
                        int ignore=0+dp[ind+1][0][limit];
                        profit=max(sell,ignore);            
                    }

                    dp[ind][buy][limit]= profit;
                }
            }
        }
        return dp[0][1][2];
    }
    int maxProfit(vector<int>& prices) {
        return solve(prices);
    }
    
    //Space optimisation
    int solve(vector<int>& prices){
        int n=prices.size();
        
        vector<vector<int>>cur(2,vector<int>(3,0));
        vector<vector<int>>next(2,vector<int>(3,0));

        for(int ind=n-1; ind >= 0;ind--){
            for(int buy=0;buy <= 1;buy++){
                for(int limit = 1;limit <= 2;limit++){

                    int profit=0;
                    if(buy){
                        int take=(-prices[ind]+next[0][limit]);
                        int ignore=0+next[1][limit];
                        profit=max(take , ignore);
                    }
                    else{
                        int sell=prices[ind]+next[1][limit-1];
                        int ignore=0+next[0][limit];
                        profit=max(sell,ignore);            
                    }

                    cur[buy][limit]= profit;
                }
                next=cur;
            }
        }
        return next[1][2];
    }
