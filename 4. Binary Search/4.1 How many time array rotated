// Just find the minimum element index and return 
note:
minimum element is always smaller than left or right others are just smaller than next element 
int findKRotation(int arr[], int n) {
	    // code here
	    int s=0;
	    int e=n-1;
	    
	    while(s < e){
	        int mid=s+ (e-s)/2;
	        if(arr[mid] < arr[mid-1]){
	            return mid;
	        }
	        if(arr[mid] < arr[e]){
	            e=mid-1;
	        }
	        else s=mid+1;
	    }
	   // return s;
	}

-----OR---
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s=0;
        int n=nums.size();
        int e=nums.size()-1;
        while(s <= e){
            int mid=(s+e)>>1;
            int prev=(mid+n-1)%n;
            int next=(mid)%n;
            if(nums[mid] == target){
                return mid;

            }
            if(nums[mid] >= nums[s]){
                if(target >= nums[s] && target <nums[mid]){
                    e=mid-1;
                }
                else s=mid+1;
            }
            else{
                if(target > nums[mid] && target <= nums[e]){
                    s=mid+1;
                }
                else e=mid-1;
            }
        }
        return -1;
    }
};
