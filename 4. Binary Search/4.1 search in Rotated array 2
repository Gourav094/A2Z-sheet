//This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int s=0;
        int e=nums.size()-1;
        while(s <= e){
            int mid=s + (e - s)/2;
    // if mid already equals to target
            if(nums[mid] == target){
                return true;
            }
    //if s=mid=e ,we cant find the criteria to go left or right       
            if((nums[s] == nums[mid]) && (nums[e]==nums[mid])){
                e--;
                s++;
            }
    //left is in order
            else if(nums[s] <= nums[mid]){
                //target is in left of mid
                if((nums[s] <= target) && (nums[mid]>target)){
                    e=mid-1;
                }
                else s=mid+1;
            }
    //right is  in order
            else{
                //target is in right of mid
                if((nums[mid] < target) && (nums[e] >= target)){
                    s=mid+1;
                }
                else e=mid-1;
            }
        }
        return false;
    }
};
