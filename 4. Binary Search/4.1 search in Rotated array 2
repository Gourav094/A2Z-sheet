//This problem is similar to Search in Rotated Sorted Array, but nums may contain duplicates. Would this affect the runtime complexity? How and why?
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int s=0;
        int e=nums.size()-1;
        while( s <= e){
            int mid=s + (e-s)/2;
            if(nums[mid] == target){
                return true;
            }
            if((nums[s] == nums[mid]) && (nums[e]==nums[mid])){
                e--;
                s++;
            }
            else if(nums[mid] < nums[s]){
                if(target <= nums[e] && target > nums[mid]){
                    s=mid+1;
                }
                else e=mid-1;

            }
            else{
                if(target >= nums[s] && target < nums[mid]){
                    e=mid-1;
                }
                else s=mid+1;
            }
        }
        return false;
    }
};
