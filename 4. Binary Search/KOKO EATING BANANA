intution
question:
we have to find minimum bananas to eat in one hour such that all banans can be eaten in h hours.

Brute Force:
since our range is from 1 to arr[n] becoz we can eat minimum 1 banana and maximum arr[n] banana.
now find banana by considering each banana in one hour and take minimum element when all are eaten before h hours
i.e

solve(piles){
    for(int i = low;i < high;i++){
        reqTime = TotalHours(piles,i);
        if(reqTime <= h){
            return i;
        }
    }
}
taking n banana in 1 hour 
e.g--> 
k = 2 total time  = 15hours
k = 3 total time  = 10hours
TotalHours(piles,n)
for(int i = 0;i < piles.size();i++){
    totalhours += ceil(i / n);
}
Lets optimise this code
using binary search ==> this will minimise the range

Code
class Solution {
public:
    bool solve(vector<int>& piles,int mid,int h){
        long long ans = 0;
        for(int it:piles){
            ans += ceil(it /(double) mid);
        }
        return ans <= h;
    } 
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1;
        int high = *max_element(piles.begin(),piles.end());
        int ans = INT_MAX;
        while(low <= high){
            int mid = low + (high - low) / 2;
            if(solve(piles,mid,h)){
                ans = mid;
                high = mid -1;
            }
            else low = mid + 1;
        }
        return ans;
    }
};
