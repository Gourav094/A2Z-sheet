STEPS

First we run ^(xor) to get the a^b (According to ex 1, 1^1 = 0 and 2^2 = 0 and the final xor = 3^5)
Search the position to do partitioning in binary representation of a^b
Partition the array by this position and get a and b correspondingly
e.g. [1, 2, 1, 3, 2, 5]

1 = 001
2 = 010
1 = 001
3 = 011
2 = 010
5 = 101

After 1st step, we found out that a^b = 3^5 = 6 which is 110
Let's use the righmost setbit to partition our array

Now we create a mask and then find the rightmost setbit so the mask will be, mask = 010

If mask & nums[i] == 0
1 = 001
1 = 001
5 = 101 ✅
1^1^5 => 5

else
2 = 010
2 = 010
3 = 011 ✅
2^2^3 => 3

ans = [3, 5]

Steps:
Find Xor of all element of nums
Now we have to find two number but we have one ans i.e find two number from that XOR
Check the position of MSB set bit in XOR store in i
Now separate the original array according to set bit at ith place
we will get two array ,find xor separately and store in ans
code:
vector<int> singleNumber(vector<int>& nums) {
        vector<int>ans;
        int Xor=0;
    //find the Xor of all array and get two unique element xor
        for(int i=0;i < nums.size();i++){
            Xor=Xor ^ nums[i];
        }
    //Now find the last bit that is one 
        int cnt=0;
        while(Xor){
            if(Xor & 1){
                break;
            }
            cnt++;
            Xor=Xor >> 1;
        }
    //Now Check the cnt bit is set or not with nums[i] 
        int mask=(1 << cnt);
        int xor1=0,xor2=0;
    //find two xor one with containg MSB=1 other contain 0
        for(int i=0;i < nums.size();i++){
            if(mask & nums[i]){
                xor1=xor1 ^ nums[i];
            }
            else{
                xor2=xor2 ^ nums[i];
            }
        }
        ans.push_back(xor1);
        ans.push_back(xor2);
        return ans;
    }
