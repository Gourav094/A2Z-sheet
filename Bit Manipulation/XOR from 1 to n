brute force:
int xor=0;
for(1 to n){
   xor=xor^i;
}

optimised approach:
example:
i  --> XOR
1  --> 1
2  --> 3
3  --> 0
4  --> 4

5  --> 1
6  --> 7
7  --> 0
8  --> 8

see there is a pattern that for
n % 4 == 0   == >  print(n)
n % 4 == 1  == > print(1)
n % 4 == 2  ==> print(n+1)
n % 4 == 3  ==> print(0)

int computeXOR(int n)
{
   
  // If n is a multiple of 4
  if (n % 4 == 0)
    return n;
 
  // If n%4 gives remainder 1
  if (n % 4 == 1)
    return 1;
 
  // If n%4 gives remainder 2
  if (n % 4 == 2)
    return n + 1;
 
  // If n%4 gives remainder 3
  return 0;
}
