for vertical view we need to put element according to level and vertical

Step-1: Assigning vertical and level to every node
Take a queue that store Node,vertical and level

Step-2: Storing Verticals and levels to our data structure
Take a map data structure to store sorted according to verticals
i.e map<vertical,X>

Now on vertcal we need to print low level value first so take map for that
i.e map<vertical<map<level,Y>>>

Now at particular level there can be multiple value son take in order
for that use multi set which store value in sorted order

i.e map<vertical<map<level,int>>>

Step 3: Printing vertical order traversal from our data structure

Code
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>>ans;
        queue<pair<TreeNode*,pair<int,int>>>q;
        q.push({root,{0,0}});
        map<int,map<int,multiset<int>>>mp;

        while(!q.empty()){
            auto it=q.front();
            q.pop();
            TreeNode* node=it.first;
            int x=it.second.first;
            int y=it.second.second;
            mp[x][y].insert(node->val);

            if(node->left){
                q.push({node->left,{x-1,y+1}});
            }
            if(node->right){
                q.push({node->right,{x+1,y+1}});
            }
        }   
        for(auto nodes:mp){
            vector<int>temp;
            for(auto i:nodes.second){
                temp.insert(temp.end(),i.second.begin(),i.second.end());
            }
            ans.push_back(temp);
        }
        return ans;
    }

};
