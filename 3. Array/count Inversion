Here the logic is take two sorted array 
keep left at left sorted array and right at right sorted array 
now compare the condition given in question .
  NOte: in left side if j at element is satisfying the condition we dont need to go to right bcoz they also gonna satisfy the condition

#include <bits/stdc++.h> 
long long Merge(long long* arr,int low,int mid,int high){
    vector<int>temp;
    int count = 0;
    int left = low,right = mid+1;
    while(left <= mid && right <= high){
        if(arr[left] <= arr[right]){
            temp.push_back(arr[left++]);
        }
        else{
            count += mid-left+1;
            temp.push_back(arr[right++]);
        }

    }
    while(left <= mid){
        temp.push_back(arr[left++]);
    }
    while(right <= high){
        temp.push_back(arr[right++]);
    }

    for(int i = low;i <= high;i++){
        arr[i] = temp[i-low];
    }
    return count;
}
long long MergeSort(long long* arr,int low,int high){
    if(low >= high){
        return 0;

    }
    int mid = (low+high)/2;
    int count = MergeSort(arr,low,mid);
     count += MergeSort(arr,mid+1,high);
     count+=Merge(arr,low,mid,high);
     return count;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    return MergeSort(arr,0,n-1);
}
