// Brute force 
int Solution::solve(vector<int> &A, int B) {
    int ans = 0;
    int n1 = A.size();
    for(int i = 0;i < n1;i++){
        for(int j = i;j < n1;j++){
            int xorr = 0;
            for(int k = i;k <= j;k++){
                xorr = xorr ^ A[k];
            }
            if(xorr == B){
                ans++;
            }
        }
    }
    return ans;
}

// better
int Solution::solve(vector<int> &A, int B) {
    int ans = 0;
    int n1 = A.size();
    for(int i = 0;i < n1;i++){
        int xorr = 0;
        for(int j = i;j < n1;j++){
            xorr = xorr ^ A[j];
            if(xorr == B){
                ans++;
            }
        }
    }
    return ans;
}
//optimal
int Solution::solve(vector<int> &A, int k) {
    int ans = 0;
    int xorr = 0;
    unordered_map<int,int>mp;
    mp[0]++;
    for(int i = 0;i < A.size();i++){
        xorr = xorr ^ A[i];
        int x = xorr ^ k;
        ans += mp[x];
        mp[xorr]++;
    }
    return ans;
