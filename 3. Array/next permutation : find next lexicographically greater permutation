Intution:

There will always be an increasing sequence of all possible permutations when observed.
Letâ€™s check all sequences of permutations of {1,2,3}.
1->2->3   increasing order

Thus, we can see every sequence has increasing order. Hence, our approach aims to get a peak from where the increasing sequence starts. 
This is what we achieve from our first step of the approach. 

Then, we need to get just a larger value than the point where the peak occurs. 
To make rank as few as possible but greater than input array, just perverse array from breakpoint achieved from the first step of the approach. 


approach:
1. find nums[i] < nums [i+1] form the second last elemnt of the array.
2. find nums[i] < nums[j] in the array from last.
3. swap(nums[i],nums[j])
4. reverse the array 


class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int i,j;
        
        for(i=n-2;i>=0;i--){
            if(nums[i] < nums[i+1]){
                break;
            }
        }
        if(i < 0){
            reverse(nums.begin(),nums.end());
        }
        else{
            for(j=n-1;j>=i;j--){
                if(nums[i] < nums[j]){
                    break;
                }
            }
            swap(nums[i],nums[j]);
            reverse(nums.begin() + i+1 ,nums.end()); 
        }
    }
};
