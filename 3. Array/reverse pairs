Here the logic is take two sorted array 
keep left at left sorted array and right at right sorted array 
now compare the condition given in question .
  NOte: in left side if j at element is satisfying the condition we dont need to go to right bcoz they also gonna satisfy the condition

class Solution {
public:
    int Merge(vector<int>& arr,int low,int mid,int high){
        int count = 0;
        int j = mid+1;
        for(int i = low;i <= mid;i++){
            while(j <= high && arr[i] > 2LL*arr[j]){
                j++;
            }
            count +=j-(mid+1);
        }
        vector<int>temp;
        int left = low,right = mid+1;
        while(left <= mid && right <= high){
            if(arr[left] <= arr[right]){
                temp.push_back(arr[left++]);
            }
            else temp.push_back(arr[right++]);
        }
        while(left <= mid){
            temp.push_back(arr[left++]);
        }
        while(right <= high){
            temp.push_back(arr[right++]);
        }

        for(int i = low;i <= high;i++){
            arr[i] = temp[i-low];
        }
        return count;
    }
    int MergeSort(vector<int>&nums,int low,int high){
        if(low >= high){
            return 0;
        }
        int mid = (low+high)/2;
        int count = MergeSort(nums,low,mid);
        count += MergeSort(nums,mid+1,high);
        count += Merge(nums,low,mid,high);
        return count;
    }
    int reversePairs(vector<int>& nums) {
        return MergeSort(nums,0,nums.size()-1);
    }
};
