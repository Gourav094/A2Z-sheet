int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n = nums.size();
        int ans=0;
        if(n == 1){
            return 1;
        }
        for(int i=0;i < n;i++){
            int count=0;
            if(nums[i+1] == nums[i]+1){
                count++;
            }
            ans=max(ans,count);
        }
        return ans;
    }
    
    
    optimal approach:--
    
    use hashset to store all the elements then find num-1 ...if not exist i.e num is starting element 
    so check for num+1 in hashset then find max count of longest consecutive 
    
    class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        set<int> s;
        for(int i:nums){
            s.insert(i);
        }
        int ans=0;
        for(int num:nums){
            if(!s.count(num-1)){
                int cur=num;
                int count=1;
                while(s.count(cur+1)){
                    cur+=1;
                    count+=1;
                }
                ans=max(ans,count);
            }
        }
        return ans;
    }
};
