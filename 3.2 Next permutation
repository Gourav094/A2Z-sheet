//brute force-- just find permutaion using inbuilt func and return the next permutation of given permutation

//optimal solution:
approach:--
1. Find the break pointer from last i.e arr[i] < arr[i+1] break
2. if i < 0 means its the first permutation so reverse all array
3. else find the greater element than i in right array and swap it
4. now reverse the i+1 to n array

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size(),k,l;
        for(k=n-2;k>=0;k--){
            if(nums[k] < nums[k+1]){
                break;
            }
        }
        if(k<0){
            reverse(nums.begin(),nums.end());
        }else{
            for(l=n-1;l>=0;l--){
                if(nums[k]<nums[l]){
                    break;
                }
            }
            swap(nums[k],nums[l]);
            reverse(nums.begin()+k+1,nums.end());
        }
    }
};
