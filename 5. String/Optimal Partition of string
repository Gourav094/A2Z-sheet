Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.

code:
class Solution {
public:
    int partitionString(string s) {
        set<char>charset;
        int count=1;
        for(int i=0;i < s.length();i++){
            if(charset.find(s[i]) == charset.end()){
                charset.insert(s[i]);
            }
            else{
                count++;
                charset.clear();
                charset.insert(s[i]);
            }   
        }
        return count;
    }
};
