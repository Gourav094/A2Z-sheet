
T.C---> O(n*n)
long long int substrCount (string s, int k) {
    	//code here.
    	int n=s.length();
    	long long int ans=0;
    //use a arrray to store the occurence 
        int a[26];
    	for(int i=0;i < n;i++){
    	    int count=0;
    	    memset(a,0,sizeof(a));
    	    for(int j=i;j < n;j++){
    	  //if not in the array then inc counter becoz its the unique element      
    	        if(a[s[j]-'a'] == 0){
    	            count++;
    	        }
    	 //increase occurence in array
    	        a[s[j]-'a']++;
    	 // count equal to k then inc ans bcoz its a valid substring
    	        if(count == k){
                    ans++;
    	        }
    	 // count exceedes the k then just break
    	        if(count > k){
    	            break;
    	        }
    	    }
    	}
    	return ans;
    }
    
    //Better solution
    T.C-->O(n)
    long long int solve(string arr, long long int n, int k)
    {
        long long int i=0;
        long long int j=0;
        long long int sum=0;
        long long int len=0;
        long long m[26]={0};
        while(j<n)
        {
            m[arr[j]-'a']++;
            if(m[arr[j]-'a']==1)
            {
                len++;
            }
            while(len > k)
            {
                m[arr[i]-'a']--;
                if(m[arr[i]-'a']==0)
                {
                    len--;
                }
                i++;
            }
              sum+=j-i+1;
              j++;
        }
        
        return sum;
        
    }
    long long int substrCount (string s, int k) {
    	//code here.
    	int n=s.length();
    	return solve(s,n,k)-solve(s,n,k-1);
    }
