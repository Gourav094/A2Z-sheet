N = 3
M[][] = {{0 1 0},
         {0 0 0}, 
         {0 1 0}}
Output: 1
Explanation: 0th and 2nd person both
know 1. Therefore, 1 is the celebrity. 

approach:
1.put all elements in stack
2.take two elements and check they are celebrity or not.
3.if a know other then push n else push a 
4. now check the left elements row and col
i.e in row zero count should be equals to n bcoz he doesnt know anyone
and in col one count should be equals to n-1 means except diagonal

cass Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    bool knows(vector<vector<int> >& mat,int a,int b){
        if(mat[a][b] == 1){
            return true;
        }
        else return false;
    }
    int celebrity(vector<vector<int> >& mat, int n) 
    {
        // code here
        stack<int>s;
        for(int i=0;i < n;i++){
            s.push(i);
        }
        while(s.size() > 1){
            int a=s.top();
            s.pop();
            int b=s.top();
            s.pop();
            
            if(knows(mat,a,b)){
                s.push(b);
            }
            else s.push(a);
        }
    
    
        int ans=s.top();
        int zerocount=0;
        for(int i=0;i < n;i++){
            if(mat[ans][i] == 0){
                zerocount++;
            }
        }
        if(zerocount != n){
            return -1;
        }
        int onecount=0;
        for(int i=0;i < n;i++){
            if(mat[i][ans] == 1){
                onecount++;
            }
        }
        if(onecount != n-1){
            return -1;
        }
        return ans;
    }
};
