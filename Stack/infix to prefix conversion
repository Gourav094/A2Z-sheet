TO convert infix to prefix:
1.reverse the string 
2.find postfix expression  -- Note: we need precedence only greater than not equal 
3.reverse again

#include <bits/stdc++.h>
using namespace std;
//infix to postfix code

int prec(char c) {
      if (c == '^')
        return 3;
      else if (c == '/' || c == '*')
        return 2;
      else if (c == '+' || c == '-')
        return 1;
      else
        return -1;
    }
string infixToPostfix(string s) {
	// Your code here
	stack<char>st;
	string ans;
	for(int i=0;i < s.length();i++){
		char ch=s[i];
		if((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')){
			ans+=ch;
		}
		else if(ch == '('){
			st.push('(');
		}
		else if(ch == ')'){
			while(!st.empty() && st.top() != '('){
				ans+=st.top();
				st.pop();
			}
			st.pop();
		}
		else{
			while(!st.empty() && prec(st.top()) > prec(s[i])){
				ans+=st.top();
				st.pop();
			}
			st.push(ch);
		}
		
	}
	while(!st.empty()){
		ans+=st.top();
		st.pop();
	}
	return ans;
}

string infixToPrefix(string s){
	reverse(s.begin(),s.end());
	for(int i=0;i < s.length();i++){
		if(s[i] == '('){
			s[i]=')';
		}
		else if(s[i] == ')'){
			s[i]='(';
		}
	}
	string ans=infixToPostfix(s);
	reverse(ans.begin(),ans.end());
	return ans;
}

int main()
{
    string s = ("x+y*z/w+u");

    cout << infixToPrefix(s) << std::endl;
    return 0;
}
