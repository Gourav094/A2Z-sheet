Prefix to Infix Conversion

bool isOperator(char x) {
  switch (x) {
  case '+':
  case '-':
  case '/':
  case '*':
  case '^':
  case '%':
    return true;
  }
  return false;
}
 
// Convert prefix to Infix expression
string preToInfix(string st) {
  stack<string> s;
  int length = st.size();
 
  // reading from right to left
  for (int i = length - 1; i >= 0; i--) {
 
    // check if symbol is operator
    if (isOperator(st[i])) {
 
      // pop two operands from stack
      string op1 = s.top();   s.pop();
      string op2 = s.top();   s.pop();
 
      // concat the operands and operator
      string temp = "(" + op1 + st[i] + op2 + ")";
      s.push(temp);
    }
    else { 
      // push the operand to the stack
      s.push(string(1, st[i]));
    }
  }
  // Stack now contains the Infix expression
  return s.top();
}

```Prefix to Postfix Conversion
string preToPost(string pre_exp)
{
 
    stack<string> s;
    // length of expression
    int length = pre_exp.size();
 
    // reading from right to left
    for (int i = length - 1; i >= 0; i--)
    {
        // check if symbol is operator
        if (isOperator(pre_exp[i]))
        {
            // pop two operands from stack
            string op1 = s.top();
            s.pop();
            string op2 = s.top();
            s.pop();
 
            // concat the operands and operator
            string temp = op1 + op2 + pre_exp[i];
 
            // Push string temp back to stack
            s.push(temp);
        }
        // if symbol is an operand
        else {
            // push the operand to the stack
            s.push(string(1, pre_exp[i]));
        }
    }
    // stack contains only the Postfix expression
    return s.top();
}
