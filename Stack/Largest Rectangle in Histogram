Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.

Solution is just simple finding nearest smaller right and left width will be right-left-1
heights = [ 6  2 5 4 5  1 6]
    NSL = [-1 -1 1 1 3 -1 5]
    NSR = [ 1  5 3 5 5  7 7]
   width =[ 1  5 1 3 1  7 1] 
   width=NSR-NSL-1

area=nums[i]*width[i];
//code
class Solution {
public:
    int solve(vector<int>& heights){
        stack<pair<int,int>>s;
        vector<int>left;
        vector<int>right;
        int ans=0;
        int n=heights.size();
        //Find NSR 
        for(int i=n-1;i >= 0;i--){
            while(!s.empty() && s.top().first > heights[i]){
                s.pop();
            }
            if(s.empty()){
                right.push_back(n);
            }
            else right.push_back(s.top().second);
            s.push({heights[i],i});
        }
        reverse(right.begin(),right.end());
        //Use stack for NSL
        while(!s.empty()){
            s.pop();
        }
        //Finding NSL
        for(int i=0;i < heights.size();i++){
            while(!s.empty() && s.top().first >= heights[i]){
                s.pop();
            }
            if(s.empty()){
                left.push_back(-1);
            }
            else{
                left.push_back(s.top().second);
            }
            s.push({heights[i],i});
        }
        for(int i=0;i < n;i++){
            //Area=width[i]*length[i];
            int width=right[i]-left[i]-1;
            ans=max(ans,heights[i]*width);
        }
        return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
        return solve(heights);
    }
};
