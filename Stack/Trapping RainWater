Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
approach:
Here the approach is like we basically find the left max and right max in each step and based on that we start our movement in two pointer.
if left height is greater than right then water is in rightheight-height[e]
else if right height greater then water os in leftheight-height[s]
s++ and e--
class Solution {
public:
    int trap(vector<int>& height) {
        int maxL=INT_MIN;
        int maxR=INT_MIN;
        int n=height.size();
        int s=0,e=n-1;
        int ans=0;
        while(s < e){
            maxL=max(maxL,height[s]);
            maxR=max(maxR,height[e]);

            if(maxL < maxR){
                ans+=maxL-height[s++];
            }
            else{
                ans+=maxR-height[e--];
            }
        }
        return ans;
    }
};
