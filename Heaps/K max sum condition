#include <bits/stdc++.h> 
vector<int> kMaxSumCombination(vector<int> &a, vector<int> &b, int n, int k){
	// Write your code here.
	vector<int>ans;
	priority_queue<int>pq;
	for(int i=0;i < n;i++){
		for(int j=0;j<n;j++){
			pq.push(a[i]+b[j]);
			
		}
	}
	for(int i=0; i<k; i++){
		ans.push_back(pq.top());
		pq.pop();
	}
	return ans;
}



//better approach

Approach 2 (Sorting, Max heap, Map) : 

Instead of brute-forcing through all the possible sum combinations, we should find a way to limit our search space to possible candidate sum combinations. 

Sort both arrays array A and array B.
Create a max heap i.e priority_queue in C++ to store the sum combinations along with the indices of elements from both arrays A and B which make up the sum. Heap is ordered by the sum.
Initialize the heap with the maximum possible sum combination i.e (A[N – 1] + B[N – 1] where N is the size of array) and with the indices of elements from both arrays (N – 1, N – 1). The tuple inside max heap will be (A[N-1] + B[N – 1], N – 1, N – 1). Heap is ordered by first value i.e sum of both elements.
Pop the heap to get the current largest sum and along with the indices of the element that make up the sum. Let the tuple be (sum, i, j).
Next insert (A[i – 1] + B[j], i – 1, j) and (A[i] + B[j – 1], i, j – 1) into the max heap but make sure that the pair of indices i.e (i – 1, j) and (i, j – 1) are not 
already present in the max heap. To check this we can use set in C++.
Go back to 4 until K times.
