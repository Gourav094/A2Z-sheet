1. take two heap one is max for smaller elements and other is min heap for larger elements
2. start pushing from max heap and check their size is not equal then push larger element into other heap so that their  size is maintained 
3. now for findning median check their top if size equal then return their average otherwise return top of maximum size among these two

class MedianFinder {
public:
    priority_queue<int>max_heap;
    priority_queue<int,vector<int>,greater<int>>min_heap;
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(max_heap.empty() || max_heap.top() > num){
            max_heap.push(num);
        }
        else min_heap.push(num);

        if(max_heap.size() > min_heap.size()+1){
            min_heap.push(max_heap.top());
            max_heap.pop();
        }
        else if(min_heap.size() > max_heap.size()){
            max_heap.push(min_heap.top());
            min_heap.pop();
        }
    }
    
    double findMedian() {
        if(max_heap.size() == min_heap.size()){
            double avg=(max_heap.top() + min_heap.top())/2.0;
            return avg;
        }
        else{
            return max_heap.size() > min_heap.size() ? max_heap.top(): min_heap.top();
        }
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
