Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6


Steps:
1. take front node of every list and store in priority queue 
2. take a ans list to store all the linked list 
3. traverse all the priority queue 
4. take front element and pop it ==> insert element->next in queue
and join with ans node also

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
 class compare{
     public:
     bool operator()(ListNode* a,ListNode* b){
        return a->val > b->val;
     }
 };
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
            priority_queue<ListNode*,vector<ListNode*>,compare>pq;

            for(auto list:lists){
                if(list){
                    pq.push(list);
                }
            }
            
            ListNode ans(0);
            ListNode* tail=&ans;
            while(!pq.empty()){
                ListNode* temp=pq.top();
                pq.pop();
                tail->next=temp;
                tail=tail->next;
                if(temp->next){
                    pq.push(temp->next);
                }
            }
           
            return ans.next;
    }
};
